import{_ as n,p as s,q as a,Q as p,R as t,a1 as e}from"./framework-5866ffd3.js";const o={},c=t("p",null,"分治法求最大子数组的 javascript 实现。",-1),l=e(`<h1 id="分治法求最大子数组" tabindex="-1"><a class="header-anchor" href="#分治法求最大子数组" aria-hidden="true">#</a> 分治法求最大子数组</h1><h2 id="分治法" tabindex="-1"><a class="header-anchor" href="#分治法" aria-hidden="true">#</a> 分治法</h2><p>分治策略递归求解一个问题，在每层递归中：</p><ul><li>分解(Divide)步骤：将问题划分未一些子问题，子问题的形式与原问题一样，只是规模更小</li><li>解决(Conquer)步骤：递归地求解出子问题。如果子问题的规模足够小，则停止递归，直接求解</li><li>合并(Combine)步骤：将子问题的解组合成原问题的解</li></ul><h2 id="最大子数组问题" tabindex="-1"><a class="header-anchor" href="#最大子数组问题" aria-hidden="true">#</a> 最大子数组问题</h2><p>求数组的和最大的非空连续子数组，即最大子数组。</p><h2 id="分治策略思路" tabindex="-1"><a class="header-anchor" href="#分治策略思路" aria-hidden="true">#</a> 分治策略思路</h2><p>将子数组划分为两个规模尽量相等的子数组，<code>A[low, ..., high]</code>的一个最大子数组<code>A[i, .., j]</code>所处的位置必然是三种情况之一：</p><ul><li>完全位于子数组<code>A[low, ..., mid]</code>中，<code>low &lt;= i &lt;= j &lt;= mid</code></li><li>完全位于子数组<code>A[mid + 1, ..., high]</code>中，<code>mid &lt;= i &lt;= j &lt;= high</code></li><li>跨越了中点，<code>low &lt;= i &lt;= mid &lt; j &lt;= high</code></li></ul><p>可递归求解<code>A[low, ..., mid]</code>和<code>A[mid + 1, ..., high]</code>。</p><p>求解跨越中点的最大子数组的思路：</p><ol><li>循环求出<code>A[i, ..., mid]</code>以及<code>A[mid + 1, ..., j]</code>的最大和</li><li>合并返回左侧和右侧最大和</li></ol><h2 id="js-实现" tabindex="-1"><a class="header-anchor" href="#js-实现" aria-hidden="true">#</a> js 实现</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">findMaxSubarray</span><span class="token punctuation">(</span><span class="token parameter">iArr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> high</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// 求解跨越中点的最大子数组</span>
  <span class="token keyword">function</span> <span class="token function">findMaxCrossingSubarray</span><span class="token punctuation">(</span><span class="token parameter">arr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">var</span> leftSum <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid<span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> rightSum <span class="token operator">=</span> arr<span class="token punctuation">[</span>mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
    <span class="token keyword">var</span> left <span class="token operator">=</span> mid<span class="token punctuation">,</span>
      right <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>
    <span class="token comment">// 遍历左侧，找出左侧最大和</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> mid<span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&gt;=</span> low<span class="token punctuation">;</span> i<span class="token operator">--</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> leftSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        leftSum <span class="token operator">=</span> sum<span class="token punctuation">;</span>
        left <span class="token operator">=</span> i<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token comment">// 遍历右侧，找出右侧最大和</span>
    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token operator">=</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;=</span> high<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      sum <span class="token operator">+=</span> arr<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">&gt;</span> rightSum<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        rightSum <span class="token operator">=</span> sum<span class="token punctuation">;</span>
        right <span class="token operator">=</span> j<span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>leftSum <span class="token operator">+</span> rightSum<span class="token punctuation">,</span> left<span class="token punctuation">,</span> right<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span>high <span class="token operator">===</span> low<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 若只有一个数，返回该数</span>
    <span class="token keyword">return</span> <span class="token punctuation">[</span>iArr<span class="token punctuation">[</span>low<span class="token punctuation">]</span><span class="token punctuation">,</span> low<span class="token punctuation">,</span> high<span class="token punctuation">]</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token comment">// 取中间数</span>
    <span class="token keyword">var</span> mid <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token punctuation">(</span>high <span class="token operator">+</span> low<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 递归求左侧最大子数组</span>
    <span class="token keyword">var</span> result1 <span class="token operator">=</span> <span class="token function">findMaxSubarray</span><span class="token punctuation">(</span>iArr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 递归求右侧最大子数组</span>
    <span class="token keyword">var</span> result2 <span class="token operator">=</span> <span class="token function">findMaxSubarray</span><span class="token punctuation">(</span>iArr<span class="token punctuation">,</span> mid <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">// 求跨越中点的最大子数组</span>
    <span class="token keyword">var</span> result3 <span class="token operator">=</span> <span class="token function">findMaxCrossingSubarray</span><span class="token punctuation">(</span>iArr<span class="token punctuation">,</span> low<span class="token punctuation">,</span> mid<span class="token punctuation">,</span> high<span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">// 比较三个子数组，然后返回最大</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span>result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> result2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> result3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result1<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> result2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result3<span class="token punctuation">;</span>
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
      <span class="token keyword">return</span> result3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&gt;</span> result2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">?</span> result3 <span class="token operator">:</span> result2<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="验证" tabindex="-1"><a class="header-anchor" href="#验证" aria-hidden="true">#</a> 验证</h2><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">var</span> inputArr <span class="token operator">=</span> <span class="token punctuation">[</span>
  <span class="token number">13</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">25</span><span class="token punctuation">,</span>
  <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">16</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">23</span><span class="token punctuation">,</span>
  <span class="token number">18</span><span class="token punctuation">,</span>
  <span class="token number">20</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">7</span><span class="token punctuation">,</span>
  <span class="token number">12</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">22</span><span class="token punctuation">,</span>
  <span class="token number">15</span><span class="token punctuation">,</span>
  <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span>
  <span class="token number">7</span>
<span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token function">findMaxSubarray</span><span class="token punctuation">(</span>inputArr<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inputArr<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token comment">// 输出[43, 7, 10]，即最大和43，子数组为inputArr[7, 10]</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,16);function i(u,r){return s(),a("div",null,[c,p("more"),l])}const d=n(o,[["render",i],["__file","8-find-maximum-subarray.html.vue"]]);export{d as default};
