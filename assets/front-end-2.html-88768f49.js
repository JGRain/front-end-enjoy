import{_ as d,M as o,p as c,q as l,Q as p,R as a,t as e,N as n,a1 as s}from"./framework-5866ffd3.js";const i={},r=a("p",null,"本文简单说明一下一个网页的结构，以及 HTML 和 CSS 编写页面。",-1),h=s(`<h1 id="前端页面" tabindex="-1"><a class="header-anchor" href="#前端页面" aria-hidden="true">#</a> 前端页面</h1><p>打开浏览器，里面全都是网页或是网站。包括大家常用的百度、论坛、视频网站等等，当然现在使用 App 的占比上升了不少。不过对于常常需要搜索、或是某些应用的老用户来说，当然是大屏幕的视野要宽，键盘的输入要快啦。</p><h2 id="页面查看" tabindex="-1"><a class="header-anchor" href="#页面查看" aria-hidden="true">#</a> 页面查看</h2><p>近年来，单页应用的出现率涨高了。要说明什么是单页应用呢，我们先从最初的静态页面说起。</p><p>静态页面，里面主要是<code>HTML</code>、<code>CSS</code>和<code>javascript</code>这几种类型组成的。当然还有像<code>xHTML</code>/<code>svg</code>等待。</p><p>废话少说，我们先来看看百度首页。</p><h3 id="右键菜单" tabindex="-1"><a class="header-anchor" href="#右键菜单" aria-hidden="true">#</a> 右键菜单</h3><p>在定位某个元素的时候，我们也可以在该元素上右键选择“检查”，菜单如下：</p><p><img src="https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/1510044313(1).png" alt="image"></p><ul><li>查看网页源代码</li></ul><p>选择“查看网页源代码”，能看到当前页面的整个<code>HTML</code>文档，里面包括一些当前页面的代码。</p><ul><li>另存为</li></ul><p>选择“另存为”，可以将该页面以及相关的一些静态资源打包下载，以前经常这样来“借鉴”别人的样式。</p><ul><li>检查</li></ul><p>选择“检查”，可以检查当前选中的元素，同时打开控制台。接下里我们重点介绍控制台，因为你们以后会与他们为伴。</p><h3 id="控制台" tabindex="-1"><a class="header-anchor" href="#控制台" aria-hidden="true">#</a> 控制台</h3><p>这里顺便讲讲，前端常用的调试工具。首先，必备第一个就是 Chrome 浏览器啦。</p><h4 id="打开控制台" tabindex="-1"><a class="header-anchor" href="#打开控制台" aria-hidden="true">#</a> 打开控制台</h4><p>假设你们已经在使用 Chrome 浏览器看我的文章了，那么我们可以有三个方法打开控制台：</p><ol><li>按键<code>F12</code>。</li><li>右键菜单，选择“检查”。</li><li>快捷键<code>Shift + Ctrl + I</code>。</li></ol><h4 id="控制台菜单" tabindex="-1"><a class="header-anchor" href="#控制台菜单" aria-hidden="true">#</a> 控制台菜单</h4><p>我们来看控制台：</p><p><img src="https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/1510045324(1).png" alt="image"></p><p>这是控制台的菜单，这边简单做介绍（从左往右）：</p><ol><li>检查元素（箭头带个框框）：与右键选择元素检查相似，后面讲。</li><li>屏幕切换（手机卡在框框上）：该功能主要用于 PC 端和移动端屏幕切换，适合 H5 的开发，并且可匹配多种机型。</li><li>Element：查看元素，能看到页面中所有存在的元素。</li><li>Console：输出，常用来输出一些信息，或是错误信息。</li><li>Source：查看源文件，可支持打断点调试。开启了 source map 后，更是可以浏览器直接更改本地文件。</li><li>Network：查看网络请求信息，包括静态资源的下载、ajax 请求等。</li></ol><p>这里面主要介绍这几个，其他的等需要的时候你们就会自己去接触啦。</p><h4 id="element-查看元素" tabindex="-1"><a class="header-anchor" href="#element-查看元素" aria-hidden="true">#</a> Element 查看元素</h4><p>我们看看元素的查看，这里很方便的是，当我们选中 Element 里面某个元素，Chrome 便会突显出来，并且伴有常用的元素信息，宽高、padding、margin 等等。</p><p><img src="https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/{521323E8-144E-4B2D-8567-9488ACB1EB4C}.png" alt="image"></p><p>同时，我们也可以看到下方的 Style，里面会有当前元素匹配中的一些 CSS 样式，我们也可以尝试在这里调整，调整成想要的样式之后，再贴进我们的代码里。</p><h4 id="console-输出" tabindex="-1"><a class="header-anchor" href="#console-输出" aria-hidden="true">#</a> Console 输出</h4><p>我们常用几种方式来调试，包括打断点、<code>alert()</code>和<code>console</code>等。本骚年用<code>console</code>稍微多一些。</p><p>看看百度的页面，还藏了招聘信息：</p><p><img src="https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/1510045732(1).png" alt="image"></p><p>当然现在好像越来越流行了，有时候有趣得网站也会藏些解码游戏在里面。</p><h4 id="network" tabindex="-1"><a class="header-anchor" href="#network" aria-hidden="true">#</a> Network</h4><p>我们在搜索框里面输入内容，便能看到百度页面发起的请求：</p><p><img src="https://github-imglib-1255459943.cos.ap-chengdu.myqcloud.com/1510046804(1).png" alt="image"></p><p>我们能在这里查看请求的内容、状态、服务端返回的内容等等。</p><h2 id="页面组成" tabindex="-1"><a class="header-anchor" href="#页面组成" aria-hidden="true">#</a> 页面组成</h2><p>上面也提到过，我们的页面主要由<code>HTML</code>、<code>CSS</code>和<code>js</code>组成，如果只用于静态数据的展示，或许只需要前两者就好了，一些公司的主页/官网也常常是简单的页面。</p><h3 id="html" tabindex="-1"><a class="header-anchor" href="#html" aria-hidden="true">#</a> HTML</h3><p>HTML，指超文本标签语言。 它被称为通向 WEB 技术世界的钥匙，因为我们的<code>CSS</code>和<code>Javascript</code>，其实也属于<code>HTML</code>中的<code>&lt;style&gt;</code>和<code>&lt;script&gt;</code>标签而已。</p><p>但更多时候，我喜欢用<code>HTML</code>指代元素，例如<code>&lt;div&gt;</code>、<code>&lt;p&gt;</code>等。</p><p>最简单的莫过于：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>我的第一个标题<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>我的第一个段落。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们的<code>&lt;html&gt;</code>里面包括两个子模快：</p><ul><li><code>&lt;head&gt;</code>：常包括一些样式、<code>&lt;meta&gt;</code>标签、甚至是<code>&lt;script&gt;</code>，不展示到页面</li><li><code>&lt;body&gt;</code>：包括展示在页面的内容</li></ul><h3 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h3><p>CSS 主要是给我们的<code>HTML</code>元素添加样式，可以通过几个方式匹配：</p><ul><li><code>DOM</code>：像常用的<code>p</code>、<code>ul/li</code>等便是<code>DOM</code>匹配</li><li><code>class</code>：类的匹配</li><li><code>id</code>：id 标识符的匹配</li></ul><p><code>class</code>针对一类元素的匹配，<code>id</code>则是唯一标识符，若页面内有多个相同的<code>id</code>，则只有第一个生效。 给元素添加样式，像是绘画的过程，绘制边框、大小、颜色等，都是通过样式来设置的。</p><h3 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> Javascript</h3><p>JavaScript 是可插入 HTML 页面的编程代码。插入 HTML 页面后，可由所有的现代浏览器执行。</p><p>我们常常使用 Javascript 来做以下事情：</p><ol><li>输出 HTML。</li><li>处理事件（点击、输入等）。</li><li>改变 HTML 内容和样式。</li><li>处理 Http 请求。</li></ol><p>其他的一些基础内容，这里面不详述了。推荐几个学习基础的网站：</p>`,57),u={href:"http://www.w3school.com.cn/index.html",target:"_blank",rel:"noopener noreferrer"},g={href:"https://developer.mozilla.org/zh-CN/docs/Web/HTML",target:"_blank",rel:"noopener noreferrer"},m=s('<h1 id="单页-多页" tabindex="-1"><a class="header-anchor" href="#单页-多页" aria-hidden="true">#</a> 单页&amp;&amp;多页</h1><p>前端程序员越来越频繁提到“单页应用”、“多页应用”这些，那这又分别代表什么呢？</p><h2 id="单页应用" tabindex="-1"><a class="header-anchor" href="#单页应用" aria-hidden="true">#</a> 单页应用</h2><p>其实很简单，单页应用与多页最简单的区别就是，单页应用，是一个<code>HTML</code>文件。</p><p>当我们需要更改页面的展示，我们会移除掉部分元素，然后将需要新增的内容填充进去，与画画的擦除重绘相似。</p><p>单页应用的好处是：</p><ol><li>页面的数据状态都能维持着。</li><li>部分擦除重绘，比整个页面刷新的效果体验要好很多。</li></ol><p>当然，单页应用也会有缺点：</p><ol><li>不利于 SEO。</li><li>请求等待时间长。</li></ol>',9),k={href:"https://zh.wikipedia.org/wiki/%E6%90%9C%E5%B0%8B%E5%BC%95%E6%93%8E%E6%9C%80%E4%BD%B3%E5%8C%96",target:"_blank",rel:"noopener noreferrer"},b=s('<p>而关于单页应用的 SEO，也是有各种各样的方式优化的，大家也可以去了解。</p><h2 id="多页应用" tabindex="-1"><a class="header-anchor" href="#多页应用" aria-hidden="true">#</a> 多页应用</h2><p>多页应用，更常见于相同的业务不同的页面的开发，这些页面或许没有很多的联系或者公用的数据，每个页面维护各自的状态。</p><p>如今 H5 的业务多了，直出渲染也多了些。而多页应用和直出也是不错的搭配。</p><h3 id="单页与多页应用的比较" tabindex="-1"><a class="header-anchor" href="#单页与多页应用的比较" aria-hidden="true">#</a> 单页与多页应用的比较</h3><table><thead><tr><th>-</th><th>单页面应用</th><th>多页面应用</th></tr></thead><tbody><tr><td>组成</td><td>一个外壳页面和多个页面片段组成</td><td>多个完整页面构成</td></tr><tr><td>资源共用(css,js)</td><td>共用，只需在外壳部分加载</td><td>不共用，每个页面都需要加载</td></tr><tr><td>刷新方式</td><td>页面局部刷新或更改</td><td>整页刷新</td></tr><tr><td>url 模式</td><td>a.com/#/pageone<br>a.com/#/pagetwo</td><td>a.com/pageone.html<br>a.com/pagetwo.html</td></tr><tr><td>用户体验</td><td>页面片段间的切换快，用户体验良好</td><td>页面切换加载缓慢，流畅度不够，用户体验比较差</td></tr><tr><td>页面跳转动画</td><td>容易实现</td><td>无法实现</td></tr><tr><td>数据传递</td><td>容易</td><td>依赖 url 传参、或者 cookie 、localStorage 等</td></tr><tr><td>搜索引擎优化(SEO)</td><td>需要单独方案、实现较为困难、不利于 SEO 检索 可利用服务器端渲染(SSR)优化</td><td>实现方法简易</td></tr></tbody></table>',6),f={href:"https://juejin.im/post/5a0ea4ec6fb9a0450407725c",target:"_blank",rel:"noopener noreferrer"},_=s('<h3 id="直出和同构" tabindex="-1"><a class="header-anchor" href="#直出和同构" aria-hidden="true">#</a> 直出和同构</h3><p>直出，常常指代后端渲染，即我们请求的页面已经是把模版和数据组合好，直接吐出来给到浏览器。</p><p>与此相对的，是前端渲染。例如单页应用，我们拿到的只是一个简单的空<code>&lt;html&gt;</code>，然后浏览器解析发现需要一些请求的数据和资源，发起二次请求。 当然，这样一来一去，消耗和等待的时间便会长了。</p><p>同构又是什么呢？</p><p>直出渲染的后端可以有很多，像 PHP、JSP、Node.js 等都是可以的。而同构的意思是，前后端使用一套代码。所以简单来说，就是 Node.js 的胜出了，同构最明显的优势，则是方便维护。</p><h1 id="结束语" tabindex="-1"><a class="header-anchor" href="#结束语" aria-hidden="true">#</a> 结束语</h1><p>本节简单介绍了关于前端页面的调试和组成，以及单页和多页应用的概念。对于<code>HTML</code>、<code>CSS</code>和<code>Javascript</code>，后面我们再详细说明一下吧。</p>',7);function v(S,x){const t=o("ExternalLinkIcon");return c(),l("div",null,[r,p("more"),h,a("ul",null,[a("li",null,[a("a",u,[e("w3school"),n(t)])]),a("li",null,[a("a",g,[e("MDN web"),n(t)])])]),m,a("p",null,[e("事物都是有利有弊，单页应用的最大痛处在于 SEO。 "),a("a",k,[e("搜索引擎优化"),n(t)]),e("（英语：search engine optimization，缩写为 SEO），是一种通过了解搜索引擎的运作规则来调整网站，以及提高目的网站在有关搜索引擎内排名的方式。")]),b,a("blockquote",null,[a("p",null,[e("以上表格内容来自"),a("a",f,[e("《前端：你要懂的单页面应用和多页面应用》"),n(t)])])]),_])}const C=d(i,[["render",v],["__file","front-end-2.html.vue"]]);export{C as default};
